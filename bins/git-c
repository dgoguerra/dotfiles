#!/usr/bin/env bash

# Wrapper of 'git checkout'.
#
# - Uses fzf to select branch if no argument was provided.
#
# - Saves backup of the work tree as a stash before running
#   `git checkout`, in case its deleting data we may want
#   to revert.
#
# Requires fzf (https://github.com/junegunn/fzf) to be installed:
#
#   brew install fzf
#

getRefs() {
    git for-each-ref --sort=-committerdate --format='%(refname:short)' "$1"
}

getRemoteRefs() {
    getRefs "refs/remotes/$1/" | grep -v HEAD | cut -d/ -f2-
}

# List branches both locally and in every remote. Only show
# a remote branch if it doesnt exist locally.
listBranches() {
    localBranches=$(getRefs refs/heads/)

    echo "$localBranches"

    for remote in $(git remote); do
        remoteBranches=$(getRemoteRefs "$remote")

        # List branches in the remote, and only print the ones
        # which do not exist locally. Append name of the remote
        # to them.
        diff <(echo "$localBranches") <(echo "$remoteBranches") \
            | grep '>' | cut -c 3- \
            | xargs -I % echo % "($remote)"
    done
}

# No arguments, show available branches to checkout into
if [[ "$#" == "0" ]]; then
    line=$(listBranches | fzf) || exit 1
    branch=$(echo "$line" | cut -d' ' -f1)

    # Extract remote from the "branch (remote)" line, if any
    remote=$(echo "$line" | sed -n 's/^.* (\(.*\))$/\1/p')

    # If the branch didnt exist checkout into it tracking
    # the remote branch.
    if [[ "$remote" != "" ]]; then
        exec git checkout --track "$remote/$branch"
    fi

    exec git checkout "$branch"
fi

# If the work tree is dirty, first create stash as a backup
if [[ "$(git diff --stat)" != "" ]]; then
    git stash push -m "checkout backup (cmd: \"git c $*\")"
    git stash apply > /dev/null
fi

exec git checkout "$@"
