#!/usr/bin/env bash

# Wrapper of `docker-compose` with some aliases to common commands.
#
# Requires js-yaml and jq to be installed:
#
#   brew install jq
#   npm install -g js-yaml
#

# Get a service's env var from the docker-compose file
get-dc-env() {
    local service="$1"
    local var="$2"
    js-yaml docker-compose.yml | jq ".services.$service.environment.$var" -r
}

# Check if a JSON file contains a property
json-file-has() {
    local file="$1"
    local prop="$2"
    jq "$prop" -r "$file" -e >/dev/null 2>&1 && echo 1 || echo 0
}

# App and DB service names
APP_SERVICE=app
DB_SERVICE=mysql

CMD="$1"
ARGS="${@:2}"

case "$CMD" in
mysql)
    DB=$(get-dc-env mysql MYSQL_DATABASE)
    USER=$(get-dc-env mysql MYSQL_USER)
    PASS=$(get-dc-env mysql MYSQL_PASSWORD)

    # Open mysql in existing db container
    docker-compose exec -T $DB_SERVICE mysql -u$USER -p$PASS $DB $ARGS
    ;;
dump|mysqldump)
    DB=$(get-dc-env mysql MYSQL_DATABASE)
    USER=$(get-dc-env mysql MYSQL_USER)
    PASS=$(get-dc-env mysql MYSQL_PASSWORD)
    FILE="${DB}_local_$(date +"%Y%m%d-%H%M").sql"

    # Dump mysql database, showing progress with `pv`
    docker-compose exec -T $DB_SERVICE mysqldump \
        -u$USER -p$PASS $DB $ARGS | pv > "$FILE"

    echo "$(pwd)/$FILE"
    ;;
test)
    # Run tests in existing app container.

    # If the project has a 'composer.json' file, assume its
    # a PHP project. If not, treat it as a Node project.
    if [[ -f composer.json ]]; then
        #Â Check if a 'test' script is configured in composer.json
        HAS_TEST_SCRIPT="$(json-file-has composer.json .scripts.test)"

        if [[ "$HAS_TEST_SCRIPT" == "1" ]]; then
            TEST_CMD="composer run-script test"
        else
            # No test script, default to running phpunit
            TEST_CMD="vendor/bin/phpunit"
        fi
    else
        # Assume its a Node project, it should have a
        # `npm run test` script.
        TEST_CMD="npm run test"
    fi

    docker-compose exec $APP_SERVICE sh -c "$TEST_CMD $ARGS"
    ;;
a|art|artisan)
    # Run php artisan in existing app container
    docker-compose exec $APP_SERVICE sh -c "php artisan $ARGS"
    ;;
npm)
    # Run npm in existing app container
    docker-compose exec $APP_SERVICE sh -c "npm $ARGS"
    ;;
sh|bash)
    # Open shell or run a command in existing app container
    if [[ "$ARGS" == "" ]]; then
        docker-compose exec $APP_SERVICE sh
    else
        docker-compose exec $APP_SERVICE sh -c "$ARGS"
    fi
    ;;
*)
    # Pass any arguments to docker-compose
    docker-compose "$@"
    ;;
esac
