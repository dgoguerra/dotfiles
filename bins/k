#!/usr/bin/env bash

# Wrapper of `kubectl` with some aliases to common commands.
#
# Requires fzf to be installed:
#
#   brew install fzf
#

set -euo pipefail

if [ "${1:-}" == "" ]; then
  echo "k [command...]"
  echo
  echo "Wrapper of kubectl with extra aliases"
  echo
  echo "Commands:"
  echo "  k context [name]    Switch to the given kubectl context"
  echo "  k namespace [name]  Switch to the given kubectl namespace"
  echo "  k [command...]      Wildcard command to fallback to kubectl [default]"

  exit 1
fi

CMD="$1"
ARGS="${@:2}"

case "$CMD" in
c|ctx|context)
    ctx=$(kubectl config current-context)
    newCtx="${2:-}"

    if [ "$newCtx" == "" ]; then
        newCtx=$(kubectl config get-contexts -o name \
          | awk -v curr=$ctx '{ print $1 ($1 == curr ? " (current)" : "") }' \
          | fzf \
          | awk '{ print $1 }')
    fi

    kubectl config use-context $newCtx
    ;;

ns|namespace)
    ctx=$(kubectl config current-context)
    ns="${2:-}"

    if [ "$ns" == "" ]; then
    ns=$(kubectl config view \
      -o jsonpath='{.contexts[?(@.name=="'$ctx'")].context.namespace}')
    fi

    newNs="${2:-}"

    if [ "$newNs" == "" ]; then
        newNs=$(kubectl get namespaces -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' \
          | awk -v curr=${ns:-default} '{ print $1 ($1 == curr ? " (current)" : "") }' \
          | fzf \
          | awk '{ print $1 }')
    fi

    kubectl config set-context --current --namespace=$newNs
    ;;

*)
    # Passthrough to kubectl
    kubectl "$@"
    ;;
esac
