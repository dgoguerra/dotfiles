[user]
    name = Diego Guerra
    email = dgoguerra.or@gmail.com

[alias]
    root = !pwd
    s = status
    b = branch --verbose
    g = log --graph --decorate
    ff = merge --ff-only
    noff = merge --no-ff
    amend = commit --amend
    my-branch = !git symbolic-ref --short HEAD

    # Get remote name. If several, pick 'origin' if it exists,
    # and any other otherwise.
    my-remote = !git remote | grep origin || git remote | head -n 1

    # Get owner/repo string
    repo = !git remote get-url `git my-remote` | sed 's/.*:\\(.*\\).git.*/\\1/g'

    # Get hash of a commit.
    # Ex: git sha
    # Ex: git sha HEAD^
    # Ex: git sha HEAD --short
    sha = "!s() { git rev-parse --verify ${1-HEAD} ${@:2}; }; s"

    # Push current branch
    pushb = !git push `git my-remote` `git my-branch`

    # Configure upstream of current branch to default remote
    set-upstream = !git branch --set-upstream-to=`git my-remote`/`git my-branch`

    # Find and open file using fzf.
    # See: https://github.com/junegunn/fzf
    vim = !FILE=`git ls-files | fzf` && vim "$FILE"
    subl = !FILE=`git ls-files | fzf` && subl "$FILE"
    open = !FILE=`git ls-files | fzf` && open "$FILE"

    # Bring branch up to date by fetching from remote and rebasing into it,
    # autostashing local changes
    up = pull --rebase=preserve --autostash

    # List recent branches
    recent-branches = !git for-each-ref --sort=-committerdate --format='%(refname:short)' refs/heads/ | head -n 100

    # Diff with extra info
    d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
    # Local side of a diff
    my-diff = "!s() { git diff `git merge-base HEAD $1`; }; s"
    # Remote side of a diff
    his-diff = "!s() { git diff `git merge-base HEAD $1` $1; }; s"

    # Create a tarball of the project's working tree
    tar = !git archive --format=tar HEAD | gzip > `basename $(pwd)`_`git sha HEAD --short`_`date +"%Y%m%d-%H%M"`.tar.gz

    # First project's empty commit
    first-commit = commit -m 'Initial empty commit' --allow-empty
    # Undo the previous local commit, keeping changes in the index
    undo-commit = reset --soft HEAD^
    # Show commits in one branch but not in the other
    my-commits = "!s() { git log --left-right --graph --cherry-pick --oneline $1...$2; }; s"

    # Run a perl replace on all the files in the index.
    # Ex: git perl 's/old/new/g'
    perl = "!s() { git ls-files -z | xargs -0 perl -p -i -e \"$1\"; }; s"

    # 'git checkout' wrapper to select branch if no args were provided
    c = dot-checkout

    # 'git rebase' wrapper to select starting commit of interactive
    # rebase if none was provided.
    # Ex: git reb
    # Ex: git reb 4
    reb = dot-rebase

    # Fixup/amend any given commit.
    # Ex: git fixup
    # Ex: git fixup HASH
    fixup = dot-fixup

    # Purge file from a repository's history.
    purge = dot-purge

    # List big files in the repository's history.
    # See: https://gist.github.com/magnetikonline/dd5837d597722c9c2d5dfa16d8efe5b9
    ls-big = dot-listobjectsbysize

    # Open current branch in new PR window in Github.
    pr = dot-pr

    # Open a branch, commit or file in Github.
    # Ex: git open # opens current branch
    # Ex: git open HEAD^
    # Ex: git open master
    # Ex: git open path/to/my/file.js
    open = dot-open
    browse = dot-open

[color]
    ui = true

[color "branch"]
    current = green bold
    local = yellow bold
    remote = green bold

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[core]
    editor = vim
    excludesfile = ~/.gitignore_global

[commit]
    verbose = true

[grep]
    linenumber = true

[diff]
    tool = p4merge

    # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
    # instead of a/b/c/d as prefixes for patches
    mnemonicprefix = true

[merge]
    keepBackup = false
    tool = p4merge

[difftool "p4merge"]
    cmd = /Applications/p4merge.app/Contents/Resources/launchp4merge "\"$REMOTE\"" "\"$LOCAL\""

[mergetool "p4merge"]
    cmd = /Applications/p4merge.app/Contents/Resources/launchp4merge "\"$PWD/$BASE\"" "\"$PWD/$REMOTE\"" "\"$PWD/$LOCAL\"" "\"$PWD/$MERGED\""
    keepTemporaries = false
    trustExitCode = false
    keepBackup = false

# Authentication to Google Cloud Source Repositories.
# See: https://cloud.google.com/source-repositories/docs/adding-repositories-as-remotes
[credential "https://source.developers.google.com"]
    helper = gcloud.sh

# Git LFS configuration, added by `git lfs install` once installed.
# See: https://git-lfs.github.com/
[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
