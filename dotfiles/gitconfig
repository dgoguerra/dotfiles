[user]
    name = Diego Guerra
    email = dgoguerra.or@gmail.com

[alias]
    sha = rev-parse --verify HEAD
    root = !pwd
    repo = !git remote -v | grep '@.*fetch' | sed 's/.*:\\(.*\\).git.*/\\1/g'
    my-branch = !git symbolic-ref --short HEAD

    s = status
    b = branch --verbose
    g = log --graph --decorate
    ff = merge --ff-only
    noff = merge --no-ff
    amend = commit --amend
    pushb = !git push origin `git my-branch`
    set-upstream = !git branch --set-upstream-to=origin/`git my-branch`

    # 'git checkout' wrapper to select branch if no args were provided.
    c = "!s() { \"${DOTFILES_DIR}\"/scripts/git-checkout-wrapper.sh \"$@\"; }; s"

    # 'git rebase' wrapper to select starting commit of interactive rebase
    # it none was provided.
    # Ex: git reb
    # Ex: git reb 4
    reb = "!s() { \"${DOTFILES_DIR}\"/scripts/git-rebase-wrapper.sh \"$@\"; }; s"

    # Fixup/amend any given commit.
    # Ex: git fixup
    # Ex: git fixup HASH
    fixup = "!s() { \"${DOTFILES_DIR}\"/scripts/git-fixup.sh \"$@\"; }; s"

    # Find and open file using fzf.
    # See: https://github.com/junegunn/fzf
    vim = !FILE=`git ls-files | fzf` && vim "$FILE"
    subl = !FILE=`git ls-files | fzf` && subl "$FILE"
    open = !FILE=`git ls-files | fzf` && open "$FILE"

    # Bring branch up to date by fetching from remote and rebasing into it,
    # autostashing local changes
    up = pull --rebase=preserve --autostash

    # List recent branches
    recent-branches = !git for-each-ref --sort=-committerdate --format='%(refname:short)' refs/heads/ | head -n 100

    # Diff with extra info
    d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
    # Local side of a diff
    my-diff = "!s() { git diff `git merge-base HEAD $1`; }; s"
    # Remote side of a diff
    his-diff = "!s() { git diff `git merge-base HEAD $1` $1; }; s"

    # Compress the project's working tree
    tar = !git archive --format=tar HEAD | gzip > project_`git sha --short`_`date +"%Y%m%d-%H%M"`.tar.gz

    # First project's empty commit
    first-commit = commit -m 'Initial empty commit' --allow-empty
    # Undo the previous local commit, keeping changes in the index
    undo-commit = reset --soft HEAD^
    # Show commits in one branch but not in the other
    my-commits = "!s() { git log --left-right --graph --cherry-pick --oneline $1...$2; }; s"

    # Run a perl replace on all the files in the index.
    # Ex: git perl 's/old/new/g'
    perl = "!s() { git ls-files -z | xargs -0 perl -p -i -e \"$1\"; }; s"

    # Purge file from a repository's history.
    # See: https://help.github.com/articles/removing-sensitive-data-from-a-repository/
    purge = "!s() { git filter-branch --force --index-filter \"git rm --cached --ignore-unmatch $1\" --prune-empty --tag-name-filter cat -- --all; }; s"

    # List big files in the repository's history.
    # See: https://gist.github.com/magnetikonline/dd5837d597722c9c2d5dfa16d8efe5b9
    ls-big = "!s() { \"${DOTFILES_DIR}\"/scripts/git-listobjectbysize.sh \"$@\"; }; s"

[color]
    ui = true

[color "branch"]
    current = green bold
    local = yellow bold
    remote = green bold

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[core]
    editor = vim
    excludesfile = ~/.gitignore_global

[commit]
    verbose = true

[grep]
  linenumber = true

[diff]
    tool = p4merge

    # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
    # instead of a/b/c/d as prefixes for patches
    mnemonicprefix = true

[merge]
    keepBackup = false
    tool = p4merge

[difftool "p4merge"]
    cmd = /Applications/p4merge.app/Contents/Resources/launchp4merge "\"$REMOTE\"" "\"$LOCAL\""

[mergetool "p4merge"]
    cmd = /Applications/p4merge.app/Contents/Resources/launchp4merge "\"$PWD/$BASE\"" "\"$PWD/$REMOTE\"" "\"$PWD/$LOCAL\"" "\"$PWD/$MERGED\""
    keepTemporaries = false
    trustExitCode = false
    keepBackup = false

# Authentication to Google Cloud Source Repositories.
# See: https://cloud.google.com/source-repositories/docs/adding-repositories-as-remotes
[credential "https://source.developers.google.com"]
        helper = gcloud.sh

# Git LFS configuration, added by `git lfs install` once installed.
# See: https://git-lfs.github.com/
[filter "lfs"]
        clean = git-lfs clean -- %f
        smudge = git-lfs smudge -- %f
        process = git-lfs filter-process
        required = true
