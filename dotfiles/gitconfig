[user]
    name = Diego Guerra
    email = dgoguerra.or@gmail.com

[alias]
    root = !pwd
    s = status
    b = branch --verbose
    g = log --graph --decorate
    ff = merge --ff-only
    noff = merge --no-ff
    amend = commit --amend
    my-branch = !git symbolic-ref --short HEAD

    # Get remote name. If several, pick 'origin' if it exists,
    # and any other otherwise.
    my-remote = !git remote | grep origin || git remote | head -n 1

    # Get owner/repo string
    repo = !git remote get-url `git my-remote` | sed 's/.*:\\(.*\\).git.*/\\1/g'

    # Get hash of a commit.
    # Ex: git sha
    # Ex: git sha HEAD^
    # Ex: git sha HEAD --short
    sha = "!s() { git rev-parse --verify ${1-HEAD} ${@:2}; }; s"

    # Push current branch
    pushb = !git push `git my-remote` `git my-branch`

    # Configure upstream of current branch to default remote
    set-upstream = !git branch --set-upstream-to=`git my-remote`/`git my-branch`

    # Find and open file using fzf.
    # See: https://github.com/junegunn/fzf
    vim = !FILE=`git ls-files | fzf` && vim "$FILE"
    subl = !FILE=`git ls-files | fzf` && subl "$FILE"
    open = !FILE=`git ls-files | fzf` && open "$FILE"

    # Diff with extra info
    d = "!git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
    # Local side of a diff
    my-diff = "!s() { git diff `git merge-base HEAD $1`; }; s"
    # Remote side of a diff
    his-diff = "!s() { git diff `git merge-base HEAD $1` $1; }; s"

    # Create a tarball of the project's working tree
    tar = !git archive --format=tar HEAD | gzip > `basename $(pwd)`_`git sha HEAD --short`_`date +"%Y%m%d-%H%M"`.tar.gz

    # First project's empty commit
    first-commit = commit -m 'chore: initial empty commit' --allow-empty
    # Create a WIP commit
    wip = "!s() { git commit --no-verify -m \"wip: ${*:-temporary commit} \"; }; s"
    # Undo the previous local commit, keeping changes in the index
    undo = reset --soft HEAD^
    # Show commits in one branch but not in the other
    my-commits = "!s() { git log --left-right --graph --cherry-pick --oneline $1...$2; }; s"

    # Run a perl replace on all the files in the index.
    # Ex: git perl 's/old/new/g'
    perl = "!s() { git ls-files -z | xargs -0 perl -p -i -e \"$1\"; }; s"

[color]
    ui = true

[color "branch"]
    current = green bold
    local = yellow bold
    remote = green bold

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[core]
    editor = vim
    excludesfile = ~/.gitignore_global

[commit]
    verbose = true

[grep]
    linenumber = true

[fetch]
    prune = true

[diff]
    # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
    # instead of a/b/c/d as prefixes for patches
    mnemonicprefix = true

[merge]
    keepBackup = false
